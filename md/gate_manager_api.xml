<?xml version="1.0" encoding="utf-8"?>
<mdscript name="Gate_Manager_Interface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <cues>

    <cue name="Main">
      <actions>
        <create_list name="$GateManagerAPICommands" />
      </actions>
      <cues>
        <cue name="On_Reload" instantiate="true">
          <conditions>
            <event_ui_triggered screen="'Gate_Manager_API'" control="'reloaded'" />
          </conditions>
          <actions>
            <create_list name="$GateManagerAPICommands" />
            <append_to_list name="$GateManagerAPICommands" exact="['build_gate']" />
            <append_to_list name="$GateManagerAPICommands" exact="['connect_gates']" />
            <append_to_list name="$GateManagerAPICommands" exact="['disconnect_gates']" />
            <append_to_list name="$GateManagerAPICommands" exact="['destroy_gate']" />
            <append_to_list name="$GateManagerAPICommands" exact="['mark_gate']" />
            <append_to_list name="$GateManagerAPICommands" exact="['unmark_gate']" />
            <append_to_list name="$GateManagerAPICommands" exact="['get_gates_macro']" />
            <signal_cue_instantly cue="Reloaded" />
          </actions>
        </cue>


        <!--@doc-cue
          name: Reloaded
          description: Cue triggered when the Gate Manager API is reloaded.
          param: none
          returns: none
          -->

        <cue name="Reloaded" instantiate="true">
          <conditions>
            <event_cue_signalled />
          </conditions>
          <actions>
            <debug_text text="'Gate_Manager_API: Reloaded'"
              chance="Globals.$DebugChance" filter="general" />

          </actions>
        </cue>

        <!--@doc-cue
          name: Process_Command
          description: Cue to process a gate management command.
          param: command Id
          param2: command arguments as table
          param3: callback function name
          returns: none

          There are different commands that can be processed, with different required arguments:
          - build_gate
            - args table with:
              - sector: sector object (required)
              - macroId: string (required)
              - offset: vector (required)
              - rotation: quaternion (required if getRotationFromMap is false)
              - getRotationFromMap: boolean (optional, default false)
            - callback: function name (optional)

          - connect_gates
            - args table with:
              - gateSource: gate object (required)
              - gateTarget: gate object (required)
            - callback: function name (optional)

          - disconnect_gates
            - args table with:
              - gateSource: gate object (required)
              - gateTarget: gate object (required)
            - callback: function name (optional)

          - destroy_gate
            - args table with:
              - gate: gate object (required)
            - callback: function name (optional)

          - mark_gate
            - args table with:
              - gate: gate object (required)
            - callback: function name (optional)

          - unmark_gate
            - args table with:
              - gate: gate object (required)
            - callback: function name (optional)

          - get_gates_macro
            - callback: function name (required)
        -->

        <cue name="Process_Command" instantiate="true">
          <conditions>
            <event_cue_signalled />
          </conditions>
          <actions>
            <set_value name="$command" exact="event.param" />
            <set_value name="$args" exact="event.param2.clone" />
            <set_value name="$callback" exact="event.param3" />
            <do_if value="not $command? or $command == ''">
              <debug_text text="'Gate_Manager_API: Process_Command invoked without command.'"
                chance="100" filter="scripts" />
            </do_if>
            <do_elseif value="not $GateManagerAPICommands.contains($command)">
              <debug_text text="'Gate_Manager_API: Process_Command invoked with unknown command %s'.[$command]"
                chance="100" filter="scripts" />
            </do_elseif>
            <do_else>
              <set_value name="$argsTable" exact="[]" />
              <do_if value="$command == 'build_gate'">
                <do_if value="not $args.$sector? or $args.$sector == null or not $args.$sector.isclass.{class.sector}">
                  <debug_text text="'Gate_Manager_API: build_gate invoked without valid sector.'"
                    chance="100" filter="scripts" />
                  <remove_value name="$argsTable" />
                </do_if>
                <do_else>
                  <set_value name="$argsTable.$sector" exact="$args.$sector" />
                </do_else>
                <do_if value="not $args.$macroId? or $args.$macroId == null">
                  <debug_text text="'Gate_Manager_API: build_gate invoked without valid macro Id.'"
                    chance="100" filter="scripts" />
                  <remove_value name="$argsTable" />
                </do_if>
                <do_else>
                  <set_value name="$argsTable.$macroId" exact="$args.$macroId" />
                </do_else>
                <do_if value="not $args.$offset? or $args.$offset == null">
                  <debug_text text="'Gate_Manager_API: build_gate invoked without valid offset.'"
                    chance="100" filter="scripts" />
                  <remove_value name="$argsTable" />
                </do_if>
                <do_else>
                  <set_value name="$argsTable.$offset" exact="$args.$offset" />
                </do_else>
                <do_if value="@$args.$getRotationFromMap == null">
                  <set_value name="$argsTable.$getRotationFromMap" exact="false" />
                  <do_if value="not $args.$rotation? or $args.$rotation == null">
                    <debug_text text="'Gate_Manager_API: build_gate invoked without valid rotation.'"
                      chance="100" filter="scripts" />
                    <remove_value name="$argsTable" />
                  </do_if>
                  <do_else>
                    <set_value name="$argsTable.$rotation" exact="$args.$rotation" />
                  </do_else>
                </do_if>
                <do_else>
                  <set_value name="$argsTable.$getRotationFromMap" exact="$args.$getRotationFromMap" />
                </do_else>
              </do_if>
              <do_elseif value="$command == 'connect_gates' or $command == 'disconnect_gates'">
                <do_if value="not $args.$gateSource? or $args.$gateSource == null or not $args.$gateSource.isclass.{class.gate}">
                  <debug_text text="'Gate_Manager_API: %s invoked without valid source gate.'.[$command]"
                    chance="100" filter="scripts" />
                  <remove_value name="$argsTable" />
                </do_if>
                <do_else>
                  <set_value name="$argsTable.$gateSource" exact="$args.$gateSource" />
                </do_else>
                <do_if value="not $args.$gateTarget? or $args.$gateTarget == null or not $args.$gateTarget.isclass.{class.gate}">
                  <debug_text text="'Gate_Manager_API: %s invoked without valid target gate.'.[$command]"
                    chance="100" filter="scripts" />
                  <remove_value name="$argsTable" />
                </do_if>
                <do_else>
                  <set_value name="$argsTable.$gateTarget" exact="$args.$gateTarget" />
                </do_else>
              </do_elseif>
              <do_elseif value="$command == 'destroy_gate'">
                <do_if value="not $args.$gate? or $args.$gate == null or not $args.$gate.isclass.{class.gate}">
                  <debug_text text="'Gate_Manager_API: destroy_gate invoked without valid gate.'"
                    chance="100" filter="scripts" />
                  <remove_value name="$argsTable" />
                </do_if>
                <do_else>
                  <set_value name="$argsTable.$gate" exact="$args.$gate" />
                </do_else>
              </do_elseif>
              <do_elseif value="$command == 'mark_gate' or $command == 'unmark_gate'">
                <do_if value="not $args.$gate? or $args.$gate == null or not $args.$gate.isclass.{class.gate}">
                  <debug_text text="'Gate_Manager_API: %s invoked without valid gate.'.[$command]"
                    chance="100" filter="scripts" />
                  <remove_value name="$argsTable" />
                </do_if>
                <do_else>
                  <set_value name="$argsTable.$gate" exact="$args.$gate" />
                </do_else>
              </do_elseif>
              <do_elseif value="$command == 'get_gates_macro'">
                <do_if value="not $callback? or $callback == ''">
                  <debug_text text="'Gate_Manager_API: get_gates_macro invoked without callback function.'"
                    chance="100" filter="scripts" />
                  <remove_value name="$argsTable" />
                </do_if>
              </do_elseif>
              <do_if value="$argsTable? or @$argsTable == null">
                <debug_text text="'Gate_Manager_API: build_gate missing required parameters.'"
                  chance="100" filter="scripts" />
              </do_if>
              <do_else>
                <set_value name="$argsTable.$command" exact="$command" />
                <set_value name="$argsTable.$callback" exact="if $callback? and $callback != '' then $callback else null end" />
                <do_if value="not player.entity.$gateManagerArgs?">
                  <set_value name="player.entity.$gateManagerArgs" exact="[]" />
                </do_if>
                <append_to_list name="player.entity.$gateManagerArgs" exact="$argsTable.clone" />
                <debug_text
                  text="'Gate_Manager_API: Process_Command invoked with command %s and args: %s'.[$command, $args]"
                  chance="100" filter="scripts" />
                <raise_lua_event name="'GateManager.HandleCommand'" />
                <remove_value name="$argsTable" />
              </do_else>
            </do_else>
          </actions>
        </cue>

        <!--@doc-cue
          name: Command_Result
          description: Cue to capture the result of a gate management command.
          param: none
          returns: none
          Note:
            The result will be passed to the callback function specified in the command, if any.
            It will be present as a table with the following fields:
            - $result: string, either 'success' or 'error'
            - $message: string, a message describing the result
            - $command: string, the command that was executed
            - $callback: the callback function to invoke
            - other input fields depending on the command executed (see Process_Command cue for details).

            For two commands the result will contain additional fields:
            - build_gate: if successful, will contain $gate: the created gate object
            - get_gates_macro: if successful, will contain $gatesMacro: a list of gate macros
          -->
        <cue name="Command_Result" instantiate="true" namespace="this">
          <conditions>
            <event_ui_triggered screen="'Gate_Manager_API'" control="'CommandResult'" />
          </conditions>
          <actions>
            <debug_text
              text="'Gate_Manager_API: Capture_Results invoked with data in $gateManagerResult: %s'.[player.entity.$gateManagerResult]"
              chance="100" filter="scripts" />
            <!--Look
            up the action by id to get the callback.-->
            <set_value name="$result" exact="player.entity.$gateManagerResult" />


            <!--Handle
            the callback, if it is still valid.-->
            <!--Note:
            need to cast the object into an MD suitable component.-->
            <do_if value="$result.$callback? and $result.$callback.exists">

              <!--Make
              a copy of the params to pass to the callback.
              This is to avoid issues with references and changes to the original data.-->
              <set_value name="$result" exact="player.entity.$gateManagerResult.clone" />

              <!--Populate
              with result as param-->
              <signal_cue_instantly cue="$result.$callback" param="$result" />
            </do_if>
          </actions>
        </cue>
      </cues>
    </cue>


  </cues>
</mdscript>